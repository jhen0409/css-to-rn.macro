// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`macros Convert styles successfully: Convert styles successfully 1`] = `
"
import { StyleSheet } from 'react-native';
import css from '../macro';
const styles = StyleSheet.create(
  css\`
    .container {
      flex: 1;
      justify-content: center;
      align-items: center;
    }
    .text {
      font-size: 18;
      color: black;
    }
  \`
);

      ↓ ↓ ↓ ↓ ↓ ↓

import { StyleSheet } from 'react-native';

const styles = StyleSheet.create({
  'container': {
    'flexGrow': 1,
    'flexShrink': 1,
    'flexBasis': 0,
    'justifyContent': 'center',
    'alignItems': 'center'
  },
  'text': {
    'fontSize': 18,
    'color': 'black'
  }
});
"
`;

exports[`macros Convert styles with known value of string substitution successfully: Convert styles with known value of string substitution successfully 1`] = `
"
import { StyleSheet } from 'react-native';
import css from '../macro';

let height = 100;
const h = height;

const styles = StyleSheet.create(
  css\`
    .container {
      flex: 1;
      height: \${h};
      justify-content: center;
      align-items: center;
    }
    .text {
      font-size: 18;
      color: black;
    }
  \`
);

      ↓ ↓ ↓ ↓ ↓ ↓

import { StyleSheet } from 'react-native';


let height = 100;
const h = height;

const styles = StyleSheet.create({
  'container': {
    'flexGrow': 1,
    'flexShrink': 1,
    'flexBasis': 0,
    'height': 100,
    'justifyContent': 'center',
    'alignItems': 'center'
  },
  'text': {
    'fontSize': 18,
    'color': 'black'
  }
});
"
`;

exports[`macros Fallback to \`css-to-react-native-transform\` import with unknown value of string substitution: Fallback to \`css-to-react-native-transform\` import with unknown value of string substitution 1`] = `
"
import { StyleSheet } from 'react-native';
import css from '../macro';

let height = Math.random() * 100;
const h = height;

const styles = StyleSheet.create(
  css\`
    .container {
      flex: 1;
      height: \${h};
      justify-content: center;
      align-items: center;
    }
    .text {
      font-size: 18;
      color: black;
    }
  \`
);

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from 'css-to-react-native-transform';
import { StyleSheet } from 'react-native';


let height = Math.random() * 100;
const h = height;

const styles = StyleSheet.create(_css(\`
    .container {
      flex: 1;
      height: \${h};
      justify-content: center;
      align-items: center;
    }
    .text {
      font-size: 18;
      color: black;
    }
  \`, {
  'parseMediaQueries': true
}));
"
`;

exports[`macros Not convert if it is not template literal: Not convert if it is not template literal 1`] = `
"
import css from '../macro';
css;css();

      ↓ ↓ ↓ ↓ ↓ ↓

css;css();
"
`;

exports[`macros parseMedia successfully: parseMedia successfully 1`] = `
"
import { StyleSheet } from 'react-native'
import css, { parseMedia } from '../macro';

const styles = StyleSheet.create(
  parseMedia(
    css\`
      .container {
        flex: 1;
        justify-content: center;
        align-items: center;
      }
      @media not android {
        .container {
          background-color: #ccc;
        }
      }
    \`,
    {
      /* match object of react-native-css-media-query-processor */
    },
  ),
)
parseMedia(css\`@media not android { .container { flex: 1; } }\`)
parseMedia

      ↓ ↓ ↓ ↓ ↓ ↓

import { process as _parseMedia } from 'react-native-css-media-query-processor';
import { StyleSheet } from 'react-native';


const styles = StyleSheet.create(_parseMedia({
  'container': {
    'flexGrow': 1,
    'flexShrink': 1,
    'flexBasis': 0,
    'justifyContent': 'center',
    'alignItems': 'center'
  },
  '__mediaQueries': {
    '@media not android': [{
      'inverse': true,
      'type': 'android',
      'expressions': []
    }]
  },
  '@media not android': {
    'container': {
      'backgroundColor': '#ccc'
    }
  }
}, {
  /* match object of react-native-css-media-query-processor */
}));
_parseMedia({
  '__mediaQueries': {
    '@media not android': [{
      'inverse': true,
      'type': 'android',
      'expressions': []
    }]
  },
  '@media not android': {
    'container': {
      'flexGrow': 1,
      'flexShrink': 1,
      'flexBasis': 0
    }
  }
}, {});
parseMedia;
"
`;
